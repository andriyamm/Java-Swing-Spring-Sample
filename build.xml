<?xml version="1.0"?>
<project name="secret-octo-hipster" default="main" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- Sets variables which can later be used. -->
	<!-- The value of a property is accessed via ${} -->
	<property name="src.dir" location="src" />
	<property name="pack.dir" location="${src.dir}/com/ss/test" />
	
	<property name="dao.src.dir" location="${pack.dir}/dao" />
	<property name="service.src.dir" location="${pack.dir}/service" />
	<property name="domain.src.dir" location="${pack.dir}/domain" />
	<property name="gui.src.dir" location="${pack.dir}/gui" /> 
	
	<property name="build.dir" location="build" />
	<property name="lib.dir" value="lib" />
	<property name="classes.dir" value="${build.dir}/classes" />
	
	<property name="WebContent.dir" value="WebContent" />
	<property name="server.classes.dir" location="${WebContent.dir}/WEB-INF/classes" />
	<property name="server.lib.dir" value="${WebContent.dir}/WEB-INF/lib" />
	
	<property name="warfilename" value="${ant.project.name}.war" />
	<property name="warfile" value="${build.dir}/${warfilename}" />
	
	<property name="jarfilename" value="${ant.project.name}.jar" />
	<property name="jarfile" value="${build.dir}/${jarfilename}" />

	<property file="build.properties" />

	<!-- paths used for compilation and run  -->
	<path id="lib.path.id">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="path.id">
		<path refid="lib.path.id" />
		<path location="${classes.dir}" />
	</path>

	<path id="server.lib.path.id">
		<fileset dir="${server.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<path id="server.path.id">
		<path refid="server.lib.path.id" />
		<path location="${server.classes.dir}" />
	</path>
	
	<!--   target: resolve              -->
	<target name="resolve" description="--> retreive dependencies with ivy">
		<ivy:retrieve conf="client" pattern="${lib.dir}/[artifact].[ext]"/>
		<ivy:retrieve conf="server" pattern="${server.lib.dir}/[artifact].[ext]"/>
	</target>

	<!--           target: report             -->
	<target name="report" depends="resolve" description="--> generates a report of dependencies">
		<ivy:report todir="${classes.dir}" />
	</target>

	<!--  target: clean-cache            -->
	<target name="clean-cache" description="--> clean the ivy cache">
		<ivy:cleancache />
	</target>

	<!-- Deletes the existing build, docs and dist directory-->
	<target name="clean">
		<echo message="Cleaning client project workspace" />
		<delete dir="${classes.dir}" />
		<delete dir="${build.dir}" />
	</target>
	
	<target name="server.clean">
		<echo message="Cleaning server project workspace" />
		<delete dir="${server.build.dir}" />
	</target>

	<target name="clean-all" depends="clean, server.clean, clean-cache" >
		<echo message="Cleaning project workspace and ivy cache" />
	</target>
	
	<!-- Creates the  build, docs and dist directory-->
	<!--  Make folder build and classes -->
	<target name="init" depends="clean">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${lib.dir}" />
		<mkdir dir="${server.classes.dir}" />
	</target>
	
	<target name="compile-server" depends="init, resolve">
		<echo message="Compiling server project sources" />		
		<javac includeantruntime="false" srcdir="${domain.src.dir}" destdir="${server.classes.dir}">
			<classpath refid="server.path.id" />
		</javac>	
		<javac includeantruntime="false" srcdir="${dao.src.dir}" destdir="${server.classes.dir}">
			<classpath refid="server.path.id" />
		</javac>	
		<javac includeantruntime="false" srcdir="${service.src.dir}" destdir="${server.classes.dir}">
			<classpath refid="server.path.id" />
		</javac>
	</target>
	
	<target name="compile-client" depends="init, resolve">
		<echo message="Compiling client project sources" />
		<javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}">
			<classpath refid="path.id" />
		</javac>
	</target>
	
	<target name="war" depends="compile-server">
		<copy todir="${server.classes.dir}">
			<fileset dir="${src.dir}">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<war destfile="${warfile}" needxmlfile="false">
			<classes dir="${server.classes.dir}" />
			<fileset dir="${WebContent.dir}" />
		</war>
	</target>

	<manifestclasspath property="lib.list" jarfile="${jarfile}">
		<classpath refid="lib.path.id"/>
	</manifestclasspath>

	<target name="jar" depends="compile-client">
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<include name="*.xml"/>
			</fileset>
		</copy>
		<copy todir="${classes.dir}/lib">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
        <jar jarfile="${jarfile}" destfile="${jarfile}" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="com.ss.test.Run"/>
				<attribute name="Class-Path" value="${lib.list}"/>
            </manifest>
        </jar>
	</target>
	
	<target name="deploy">
		<echo message="Deployung war ${deploy}/${warfilename}" />
		<copy file="${warfile}" todir="${deploy}" />
	</target>

	<target name="undeploy">
		<echo message="Undeployung war ${deploy}/${warfilename}" />
		<delete file="${deploy}/${warfilename}" />
	</target>

	<!--  target: run client-->
	<target name="run" depends="jar, deploy" description="--> run the project">
		<java classpathref="path.id" classname="com.ss.test.Run" />
	</target>

	<target name="main" depends="jar, deploy">
		<description>Main target</description>
	</target>

</project>